name: Rust CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test ${{ matrix.rust }} on ${{ matrix.os }} (${{ matrix.config.name }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        config:
          - { name: "std-default",         args: "" }
          - { name: "std-classic",         args: "--features classic" }
          - { name: "std-pqc",             args: "--features pqc" }
          - { name: "std-full",            args: "--features full" }
          - { name: "std-classic-asm",     args: "--features 'classic,asm'" }
          - { name: "std-pqc-avx2",        args: "--features 'pqc,avx2'" }
          - { name: "std-full-optimized",  args: "--features 'full,asm,avx2'" }
          - { name: "no_std-base",         args: "--no-default-features" }
          - { name: "no_std-classic",      args: "--no-default-features --features classic" }
          - { name: "no_std-pqc",          args: "--no-default-features --features pqc" }
          - { name: "no_std-full",         args: "--no-default-features --features full" }
          - { name: "no_std-classic-asm",  args: "--no-default-features --features 'classic,asm'" }
          - { name: "no_std-pqc-avx2",     args: "--no-default-features --features 'pqc,avx2'" }
          - { name: "no_std-full-optimized", args: "--no-default-features --features 'full,asm,avx2'" }

    steps:
    - uses: actions/checkout@v3

    - name: Install NASM
      if: runner.os == 'Windows'
      uses: ilammy/setup-nasm@v1

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.config.name }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --lib ${{ matrix.config.args }} 