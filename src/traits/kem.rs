//! Defines the trait for a Key Encapsulation Mechanism (KEM).

use super::key::{PublicKey, PrivateKey};
use thiserror::Error;
use zeroize::Zeroizing;
use crate::errors::Error;

/// A secret value, derived from a KEM, suitable for use as a symmetric key.
/// It is wrapped in `Zeroizing` to ensure it's wiped from memory when dropped.
pub type SharedSecret = Zeroizing<Vec<u8>>;

/// The encapsulated key (ciphertext) produced by a KEM.
pub type EncapsulatedKey = Vec<u8>;

/// Defines the errors that can occur during KEM operations.
#[derive(Error, Debug)]
pub enum KemError {
    /// Failed to encapsulate a shared secret.
    #[error("Key encapsulation failed")]
    Encapsulation(#[source] Box<dyn std::error::Error + Send + Sync>),

    /// Failed to decapsulate a shared secret, often due to an invalid
    /// or tampered encapsulated key.
    #[error("Key decapsulation failed")]
    Decapsulation(#[source] Box<dyn std::error::Error + Send + Sync>),

    /// The provided public key is invalid for the operation.
    #[error("Invalid public key")]
    InvalidPublicKey,

    /// The provided private key is invalid for the operation.
    #[error("Invalid private key")]
    InvalidPrivateKey,

    /// The provided encapsulated key (ciphertext) is invalid.
    #[error("Invalid encapsulated key")]
    InvalidEncapsulatedKey,
}

/// A trait for a Key Encapsulation Mechanism (KEM).
///
/// KEMs are a class of public-key cryptosystems designed for securely
/// establishing shared secrets.
pub trait Kem {
    type PublicKey;
    type PrivateKey;
    type EncapsulatedKey;
    
    
    /// Generates and encapsulates a shared secret using the recipient's public key.
    ///
    /// # Returns
    /// A tuple containing the `(SharedSecret, EncapsulatedKey)`.
    /// The `SharedSecret` is for the sender to use, and the `EncapsulatedKey`
    /// is to be sent to the recipient.
    fn encapsulate(public_key: &Self::PublicKey) -> Result<(SharedSecret, Self::EncapsulatedKey), Error>;

    /// Decapsulates an encapsulated key using the recipient's private key to
    /// recover the shared secret.
    ///
    /// # Returns
    /// The `SharedSecret` that matches the one generated by the sender.
    fn decapsulate(private_key: &Self::PrivateKey, encapsulated_key: &Self::EncapsulatedKey) -> Result<SharedSecret, Error>;
} 