//! Defines the trait for a Key Encapsulation Mechanism (KEM).
//!
//! 为密钥封装机制 (KEM) 定义了 trait。

use crate::{errors::Error, traits::key::Algorithm};
#[cfg(feature = "std")]
use thiserror::Error;
use zeroize::Zeroizing;

/// A secret value, derived from a KEM, suitable for use as a symmetric key.
/// It is wrapped in `Zeroizing` to ensure it's wiped from memory when dropped.
///
/// 一个从 KEM 派生的秘密值，适合用作对称密钥。
/// 它被包装在 `Zeroizing` 中，以确保在被丢弃时从内存中清除。
pub type SharedSecret = Zeroizing<Vec<u8>>;

/// The encapsulated key (ciphertext) produced by a KEM.
///
/// KEM 生成的封装密钥（密文）。
pub type EncapsulatedKey = Vec<u8>;

/// Defines the errors that can occur during KEM operations.
///
/// 定义 KEM 操作期间可能发生的错误。
#[cfg_attr(feature = "std", derive(Error))]
#[derive(Debug)]
pub enum KemError {
    /// Failed to encapsulate a shared secret.
    ///
    /// 封装共享密钥失败。
    #[cfg_attr(feature = "std", error("Key encapsulation failed"))]
    Encapsulation,

    /// Failed to decapsulate a shared secret, often due to an invalid
    /// or tampered encapsulated key.
    ///
    /// 解封装共享密钥失败，通常是由于无效或被篡改的封装密钥。
    #[cfg_attr(feature = "std", error("Key decapsulation failed"))]
    Decapsulation,

    /// The provided public key is invalid for the operation.
    ///
    /// 提供的公钥对于该操作无效。
    #[cfg_attr(feature = "std", error("Invalid public key"))]
    InvalidPublicKey,

    /// The provided private key is invalid for the operation.
    ///
    /// 提供的私钥对于该操作无效。
    #[cfg_attr(feature = "std", error("Invalid private key"))]
    InvalidPrivateKey,

    /// The provided encapsulated key (ciphertext) is invalid.
    ///
    /// 提供的封装密钥（密文）无效。
    #[cfg_attr(feature = "std", error("Invalid encapsulated key"))]
    InvalidEncapsulatedKey,
}

/// A trait for a Key Encapsulation Mechanism (KEM).
///
/// KEMs are a class of public-key cryptosystems designed for securely
/// establishing shared secrets.
///
/// 密钥封装机制 (KEM) 的 trait。
///
/// KEM 是一类用于安全建立共享密钥的公钥密码系统。
pub trait Kem: Algorithm {
    type EncapsulatedKey;

    /// Generates and encapsulates a shared secret using the recipient's public key.
    ///
    /// # Returns
    /// A tuple containing the `(SharedSecret, EncapsulatedKey)`.
    /// The `SharedSecret` is for the sender to use, and the `EncapsulatedKey`
    /// is to be sent to the recipient.
    ///
    /// 使用接收者的公钥生成并封装一个共享密钥。
    ///
    /// # 返回
    /// 一个包含 `(SharedSecret, EncapsulatedKey)` 的元组。
    /// `SharedSecret` 供发送方使用，`EncapsulatedKey` 用于发送给接收方。
    fn encapsulate(
        public_key: &Self::PublicKey,
    ) -> Result<(SharedSecret, Self::EncapsulatedKey), Error>;

    /// Decapsulates an encapsulated key using the recipient's private key to
    /// recover the shared secret.
    ///
    /// # Returns
    /// The `SharedSecret` that matches the one generated by the sender.
    ///
    /// 使用接收者的私钥解封装一个封装密钥，以恢复共享密钥。
    ///
    /// # 返回
    /// 与发送方生成的 `SharedSecret` 相匹配的共享密钥。
    fn decapsulate(
        private_key: &Self::PrivateKey,
        encapsulated_key: &Self::EncapsulatedKey,
    ) -> Result<SharedSecret, Error>;
}
